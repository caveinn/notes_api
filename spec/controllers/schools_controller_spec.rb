require 'rails_helper'


# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#.

RSpec.describe SchoolsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # School. As you add validations to School, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:user) }
  let(:school) {
    create(:school)
  }
  let(:valid_attributes){
    {
      "name" => "sample"

    }
  }
 


  let(:header) { { 'Authorization' => token_generator(user.id) } }


  # Valid request
  # subject(:request) { described_class.new(header) }

  describe "GET #index" do
    it "returns a success response" do
      get :index
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      get :show, params: {id: school.to_param}
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    before do
      request.headers.merge!(header)
    end
    context "with valid params" do
      it "creates a new School" do
        expect {
          post :create, params: {school: valid_attributes} 
        }.to change(School, :count).by(1)
      end

      it "renders a JSON response with the new school" do

        post :create, params: {school: valid_attributes}
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json; charset=utf-8')
        expect(response.location).to eq(school_url(School.last))
      end
    end

  end

  describe "PUT #update" do
    before do
      request.headers.merge!(header)
    end
    context "with valid params" do
      let(:new_attributes) {
       {
         "name" => "changed"
       }
      }

      it "updates the requested school" do
        school = user.schools.create! valid_attributes
        put :update, params: {id: school.to_param, school: new_attributes}
        expect(response.body).to match(/changed/)
      end

      it "renders a JSON response with the school" do
        school =user.schools.create! valid_attributes

        put :update, params: {id: school.to_param, school: valid_attributes}
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end

  end

  describe "DELETE #destroy" do
    before do
      request.headers.merge!(header)
    end
    it "destroys the requested school" do
      school = user.schools.create! valid_attributes
      expect {
        delete :destroy, params: {id: school.to_param}
      }.to change(School, :count).by(-1)
    end
  end

end
